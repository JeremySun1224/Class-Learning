# -*- coding: utf-8 -*-
# -*- author: JeremySun -*-
# -*- dating: 19/12/21 -*-

"""
面向对象：核心就是对象二字，对象就是特征与技能的结合体

优点：可扩展性强

缺点：编程复杂度高

应用场景：用户需求经常变化，互联网应用，游戏等
"""

"""
类就是一系列对象相似的特征与技能的结合体
强调：站在不同的角度得到的分类是不一样的

在现实世界中：一定是先有对象后有类
在实际程序中：一定得先定义类，然后调用类来产生对象，我们使用的都是对象。类就相当于一个模子，创造出一个个有相似特征的对象。
"""

"""
在现实世界中出手，提升出一个个类：
站在路飞学院的角度，在座的都是学生。

1、先从现实世界里寻找对象：
    对象1：王二丫
        特征：
            学校 = ’LuffyCity‘
            名字 = ’王二丫‘
            性别 = ’女‘
            年龄 = 18
        技能：
            学习
            吃饭
            睡觉
    对象2：李三炮
        特征：
            学校 = ’LuffyCity‘
            名字 = ‘李三炮’
            性别 = ‘男’
            年龄 = 38
        技能：
            学习
            吃饭
            睡觉
    对象3：张铁蛋
        特征：
            学校 = ’LuffyCity‘
            名字 = ‘张铁蛋’
            性别 = ‘男’
            年龄 = 48
        技能：
            学习
            吃饭
            睡觉 

2、对象出来后开始总结类。从对象里总结路飞学院的学生类，总结类就是找相似的特征与技能。
    相似的特征(变量)
        学校 = ’LuffyCity‘
    
    相似的技能(函数)
        学习
        吃饭
        睡觉 
"""

"""
在实际程序中，
    先定义类，Python中的具体语法是class
    后产生对象
"""
# 先定义类
class LuffyCity(object):
    # 相似的特征，即变量
    school = 'LuffyCity'

    # 相似的技能，即功能，用函数实现
    def learn(self):  # Python自动添加了一个位置参数self，意味着我们在调用时要给传入一个参数，
        print('is learning')

    def eat(self):
        print('is eating')

    def sleep(self):
        print('is sleeping')

# 后产生对象，类名加括号
# 上面定义的类只是一个模板，所以产生对象的过程也称为实例化，即按照定义好的类来产生对象。
# 比如我们说你能说清楚人类具体是指哪个人或是猪类指的是哪头猪吗，显然不能，所以我们需要利用定义好的类进行实例化产生对象。
# 用类的意义就是产生对象，调用一次类就实例化一次，就会产生一个对象。
stu1 = LuffyCity()
stu2 = LuffyCity()
stu3 = LuffyCity()
print(stu1)
print(stu2)
print(stu3)

